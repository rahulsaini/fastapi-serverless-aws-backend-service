name: CI/CD

on:
  push:
    branches: 
        - develop
        - staging
        - master


jobs:
  test:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Cache Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: 1.2.0b3
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install python dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Code Quality (iSort, PyLint, MyPy, Black)
      run: ./scripts/check

    - name: Tests
      run: poetry run pytest

  deploy:
    needs: test
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
    steps:
    - uses: actions/checkout@v3
    - name: Install NodeJS for serverless framework
      uses: actions/setup-node@v3
      with:
        node-version: '14.x'
        cache: 'npm'
    - name: Install serverless framework
      run: npm i -g serverless
    - name: Install serverless plugins
      run: npm ci
    - name: Configure AWS account
      id: config_aws
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION_NAME
        echo AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text) >> $GITHUB_OUTPUT
    - name: AWS ECR Login
      env:
        AWS_ACCOUNT_ID: ${{ steps.config_aws.outputs.AWS_ACCOUNT_ID }}
      run: aws ecr get-login-password --region $AWS_REGION_NAME | docker login --username AWS --password-stdin ${{env.AWS_ACCOUNT_ID}}.dkr.ecr.$AWS_REGION_NAME.amazonaws.com
    - name: Deploy develop
      if: github.ref == 'refs/heads/develop'
      run: SLS_DEBUG="*" serverless deploy --region $AWS_REGION_NAME --stage dev --aws-profile 'default'
    - name: Deploy staging
      if: github.ref == 'refs/heads/staging'
      run: echo "serverless deploy --stage=staging"
    - name: Deploy production
      if: github.ref == 'refs/heads/main'
      run: echo "serverless deploy --stage=prod"
